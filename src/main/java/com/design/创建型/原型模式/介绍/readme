我们为什么需要原型模式?
    提高性能：通过new创建对象不能获取当前对象运行时的状态，并且new复制给新对象并没有直接clone性能要高
    逃避构造函数：原型模式生成的新对象可能是一个派生类。拷贝构造函数生成的新对象只能是类本身
原型模式(prototype)理论
    原型模式:
        用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。
        用这种方式创建对象非常高效，根本无须知道对象创建的细节
    什么时候用原型模式？
        1.对象之间相同或相似，即只是个别的几个属性不同的时候
        2.对象的创建过程比较麻烦，但复制比较简单的时候
        3.资源优化场景，在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的方法创建一个对象，
            然后由工厂方法提供给调用者
    具体原型类：
        实现抽象原型类的clone()方法，它是可被复制的对象
    问类：
        使用具体原型类中的clone()方法来复制新的对象

    优点：
        简化对象创建提高性能，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显
    缺点：
        实现原型模式每个派生类都必须实现Clone接口