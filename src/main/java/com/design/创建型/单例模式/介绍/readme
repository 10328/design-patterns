我们为什么需要单例模式?
    节省内存空间：单例在内存中只有一个实例对象，节省内存空间，避免了大量创建及销毁
    高性能：减少高重复资源重复占用，可以进行全部访问
单例模式理论
    单例模式(singleton):
        最简单的一种创建型设计模式，提供了创建对象的最佳方式，在此模式中涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。
        这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。
    什么时候用单例模式？
        1. 重复对象需要频繁实例化及销毁的对象
        2. 有状态化的工具的对象
        3. 频繁访问数据库或文件的对象
     单例角色：
        单例模式只有一个单例角色，在单例内部生成一个实例，同时提供了一个静态工厂的方法，让客户可以访问他的唯一实例，为防止外部访问，
        将其构造参数设置为私有,并对外提供一个静态对象用于外部共享的唯一实例。
--------------------------------------------------------------------------------------------------------------------
    饿汉单例模式
        饿汉模式是实现单例的最简单的模式，
    优点：
        典型的空间换时间，节省了运行时间，简单方便
        饿汉单例模式是线程安全的，不存在线程安全问题，因为虚拟机仅仅会装载一次，所有类加载不会产生并发
    缺点：
        如果在不需要创建对象的时候就装载的话，就会造成资源浪费
--------------------------------------------------------------------------------------------------------------------
    懒汉单例模式
        懒汉单例模式是在第一次调用getInstance()进行单例对象的实例化，这种实现被称为懒加载或者延迟加载，但懒汉单例模式本身是线程不安全的，
        因为多个线程遇到并发会同时调用getInstance()，就会导致创建多个实例对象
    优点：
        如果一直没有调用，则会节省空间
    缺点：
        时间换空间，造成判断产生的时间