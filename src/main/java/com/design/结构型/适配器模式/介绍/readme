适配器模式论述:
        描述: 将一个接口转换成客户端希望的另一个接口，适配器作为不兼容的两个接口之间的桥梁
        顾名思义，这个模式就是用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。
        对于这个模式，有一个经常被拿来解释它的例子，就是USB转接头充当适配器，把两种不兼容的接口，通过转接变得可以一起工作。

我们为什么需要适配器模式?
       增强灵活性：因为适配器类是适配者的子类，因此我们可以在适配器类中进行适配者的部分方法置换，从而实现适配器的灵活性
       扩展性：一个对象适配器可以把多个是适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口

适配器模式理论
    适配器模式(Adapter):
        类适配器可以采用多重继承的方法实现，比如C++可以定义一个适配器同时继承当前业务接口和现有组件库存在的组件接口，Java不支持多继承，
            所以我们需要定义一个适配器来实现当前系统业务的接口，同时继承组件库存在的组件

        对象适配器可以采用将现有组件库中已经实现的组件引入适配器中，并且适配器实现当前系统的业务接口

    什么时候用适配器模式？
        1.系统需要使用现有的类，而这些类的接口不符合系统需要
        2.想要建立一个可重复使用的类，用于有一些彼此之间没有关联的类或未来引进一些新的类一起工作
    如何看待适配器模式的角色？
        对象适配者角色
             客户端  -----> 目标抽象类
                           ↗
                         /
                        /
                   适配器 ◊--------  适配者

        类适配者角色

             客户端  ----->  目标抽象类         适配者
                                 ⇱        ↗
                                   \     /
                                    \   /
                                    适配器

            目标接口：当前业务所期待的接口，它可以是抽象类或者接口
            适配者类：它是访问和适配的现存组件库中的组件接口
            适配器类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转成目标接口，让客户按照目标接口的格式访问适配者
    适配器模式
        优点：
            1.将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码
            2.增加了类的透明性和复用性，将具体的实现封装在适配者类中
            3.灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”
        缺点：
            1.类适配器中对于不支持多重继承的语言，一次只能够适配一个适配者类，具有一定的局限性，不能将适配者和它的子类都适配到目标接口。
            2.对象适配器中，要想置换适配者类的方法就不容易，如果一定要置换掉适配者类的一个或多个方法，就只好先做一个适配者类的子类，将适配者类的方法置换掉，
                然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。

    适配器在springmvc中的应用
        DispatcherServlet -> init() -> initServletBean -> initWebApplicationContext -》 onRefresh -》 initHandlerAdapters