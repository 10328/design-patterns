装饰器模式论述:
       动态的给一个对象添加一些额外的职责. 就增加功能来说,装饰模式比增加子类更加灵活

我们为什么需要装饰器模式?
        装饰器模式是一种结构性模式,它作用是对对象已有功能进行增强,但是不改变原有对象结构.这避免了通过继承方式进行功能扩充导致的类体系臃肿.

        装饰器模式是对继承的有力补充,单纯使用继承时,在一些情况下就会增加很多的子类,而且灵活性差,维护也不容易.
        装饰器模式可以替代继承,解决类膨胀的问题,如java基础类库中的输入输出流相关的类大量使用了装饰器模式.

装饰器模式理论
    装饰器模式(Decorator):
       抽象构件(Component)角色,该角色用于规范需要装饰的对象(原始对象).
       具体构件(Concrete Component)角色:该角色实现抽象构件接口,定义一个需要装饰的原始类
       装饰(Dectorator)角色:该角色持有一个构件对象的实例,并定义一个与抽象构件接口一致的接口
       具体装饰(Concrete Dectorator)角色:该角色负责对构件对象进行装饰

    什么时候用装饰器模式？
        1.需要扩展一个类的功能，或给一个类增加附加功能
        2.需要动态的给一个对象增加功能，这些功能可以再动态的撤销
        3.需要为一批类进行改造或加装功能

    实践
    基于装饰器模式的设计方案
        第一个比较特殊的地方是：装饰器类和原始类继承同样的父类，这样我们可以对原始类“嵌套”多个装饰器类。
            比如，下面这样一段代码，我们对 FileInputStream 嵌套了两个装饰器类：BufferedInputStream 和
                DataInputStream，让它既支持缓存读取，又支持按照基本数据类型来读取数据。
            InputStream in = new FileInputStream("G:\\decorate.txt");
            BufferedInputStream bin = new BufferedInputStream(in);
            DataInputStream din = new DataInputStream(bin);
            int readInt = din.readInt();
            System.out.println(readInt);
        第二个比较特殊的地方是：装饰器类是对功能的增强，这也是装饰器模式应用场景的一个重要特点。
            装饰器和模板方法、策略模式的比较：
                装饰器保持对象的功能不变，扩展外围功能
                模板方法和策略模式则保持算法的框架不变，扩展其内部的实现
            装饰器和代理模式比较:
                代理类附加的是跟原始类无关的功能，而装饰模式中，装饰器类附加 的是跟原始类相关的功能

    Mybatis中装饰器的应用
        org.apache.ibatis.executor.CachingExecutor 99 行