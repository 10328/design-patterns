策略模式理论
    策略(Strategy)模式
        定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。其用意是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，
        从而使得它们可以相互替换，使得算法可以在不影响到客户端的情况下发生变化。
    什么时候用策略模式？
        1· 多个类只是在算法或行为上稍有不同的场景。
        2· 算法需要自由切换的场景
        3· 需要屏蔽算法规则的场景
    优点：
        · 策略模式提供了管理相关的算法的办法。策略类的等级结构定义了一个算法或行为族，恰当地使用继承可以把公共的代码移到父类中，从而避免代码重复。
        · 策略模式提供了可以替换继承关系的办法。继承可以处理多种算法或行为，如果不用策略模式，那么使用算法或行为的环境类就可能会有一些子类，
            每一个子类提供一个不同的算法或行为。但是，这样算法或行为的使用者就和算法本身混在一起，从而不可能再独立演化。
        · 使用策略模式可以避免使用多重条件转移语句。多重转移语句不易维护，它把采取哪一种算法或采取哪一种行为的逻辑与算法或行为的逻辑混合在一起，
            统统列在一个多重转移语句里面，这比使用继承的办法还要原始和落后。
    缺点：
        · 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类，
            即策略模式只适用于客户端知道所有的算法或行为的情况。
        · 策略模式造成很多的策略类。


    spring中的实践
         实现方式：
            Spring框架的资源访问Resource接口。该接口提供了更强的资源访问能力，Spring 框架本身大量使用了Resource 接口来访问底层资源。

         Resource 接口介绍
            source 接口是具体资源访问策略的抽象，也是所有资源访问类所实现的接口。Resource 接口主要提供了如下几个方法:
            getInputStream()：定位并打开资源，返回资源对应的输入流。每次调用都返回新的输入流。调用者必须负责关闭输入流。
            exists()：返回 Resource 所指向的资源是否存在。
            isOpen()：返回资源文件是否打开，如果资源文件不能多次读取，每次读取结束应该显式关闭，以防止资源泄漏。
            getDescription()：返回资源的描述信息，通常用于资源处理出错时输出该信息，通常是全限定文件名或实际 URL。
            getFile：返回资源对应的 File 对象。
            getURL：返回资源对应的 URL 对象。

         最后两个方法通常无须使用，仅在通过简单方式访问无法实现时，Resource 提供传统的资源访问的功能。
         Resource 接口本身没有提供访问任何底层资源的实现逻辑，针对不同的底层资源，Spring 将会提供不同的 Resource 实现类，不同的实现类负责不同的资源访问逻辑。
         Spring 为 Resource 接口提供了
             如下实现类：
                  UrlResource：访问网络资源的实现类。
                  ClassPathResource：访问类加载路径里资源的实现类。
                  FileSystemResource：访问文件系统里资源的实现类。
                  ServletContextResource：访问相对于 ServletContext 路径里的资源的实现类.
                  InputStreamResource：访问输入流资源的实现类。
                  ByteArrayResource：访问字节数组资源的实现类。
             这些 Resource 实现类，针对不同的的底层资源，提供了相应的资源访问逻辑，并提供便捷的包装，以利于客户端程序的资源访问。

    项目中使用
              tcpush 极光和云吧 中的应用
              nx-fastdfs 中进行验证