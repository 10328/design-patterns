模板方法模式论述:
    模板方法模式(Template Method Pattern)定义一个操作中的算法的框架,而将一些步骤延迟到子类中。
        使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。父类定义了骨架(调用哪些方法及顺序),某些特定方法由子类实现。
        最大的好处：代码复用,减少重复代码。除了子类要实现的特定方法,其他方法及方法调用顺序都在父类中预先写好了。
        所以父类模板方法中有两类方法：
            共同的方法：
            所有子类都会用到的代码不同的方法：
                子类要覆盖的方法,分为两种：
                    抽象方法：父类中的是抽象方法,子类必须覆盖
                    钩子方法：父类中是一个空方法,子类继承了默认也是空的
                    注：为什么叫钩子,子类可以通过这个钩子(方法),控制父类,因为这个钩子实际是父类的方法(空方法)！

模板方法模式理论
    模板方法模式(Template Method Pattern):
        . 抽象模板(Abstract Template)角色：该角色定义一个或多个抽象操作,以便让子类实现；这些抽象操作是基本操作,是一个顶级逻辑的组成步骤。
            还需要定义并实现一个或几个模板方法,这些模板方法一般是具体方法,即一个框架,实现对基本方法的调度,完成固定的逻辑。
        . 具体模板(Concrete Template)角色：该角色实现抽象模板中定义的一个或多个抽象方法,每一个抽象模板角色都可以有任意多个具体模板角色与之对应,
            而每一个具体模板角色都可以给出这些抽象方法的不同实现,从而使得顶级逻辑的实现各不相同。

    什么时候用模板方法模式？
            1. 多个子类有公共方法,并且逻辑基本相同时。
            2. 可以把重要的、复杂的、核心算法设计为模板方法,周边的相关细节功能则由各个子类实现。
            3. 重构时,模板方法模式是一个经常使用的模式,将相同的代码抽取到父类中。
    模板方法模式
        优点：
            1.封装不变的部分,扩展可变部分。不变的部分封装到父类中实现,而可变的部分则可以通过继承进行扩展。
            2.提取公共部分代码,便于维护。将公共部分的代码抽取出来放在父类中,维护时只需要修改父类中的代码。
            3.行为由父类控制,子类实现。模板方法模式中的基本方法是由子类实现的,因此子类可以通过扩展增加相应的功能,符合开闭原则。


Spring中的实践
    Servlet
    spring mvc 中servlet
    Servlet 容器会接收到相应的请求,并且根据 URL 和 Servlet 之间的映射关系,找到相应的Servlet(HelloServlet),然后执行它的 service() 方法。
    service() 方法定义在父类 HttpServlet 中,它会调用 doGet() 或 doPost() 方法,然后输出数据(“Hello world”)到网页。

    HttpServlet 的 service() 方法就是一个模板方法,它实现了整个 HTTP请求的执行流程,doGet()、doPost() 是模板中可以由子类来定制的部分。
    实际上,这就相当于 Servlet框架提供了一个扩展点(doGet()、doPost() 方法),让框架用户在不用修改 Servlet 框架源码的情况下,
    将业务代码通过扩展点镶嵌到框架中执行。

回调的原理解析
    相对于普通的函数调用来说,回调是一种双向调用关系。A 类事先注册某个函数 F 到 B 类,A 类在调用B 类的 P 函数的时候,
    B 类反过来调用 A 类注册给它的 F 函数。这里的 F 函数就是“回调函数”。A 调用B,B 反过来又调用 A,这种调用机制就叫作“回调”。
